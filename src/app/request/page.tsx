"use client"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Calendar as CalendarComponent } from "@/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { ArrowLeft, Calendar, Camera, Check, X, Clock } from "lucide-react"
import { useState, useEffect } from "react"
import Link from "next/link"
import Image from "next/image"
import { format } from "date-fns"
import { ru } from "date-fns/locale"

export default function RequestPage() {
  const [currentStep, setCurrentStep] = useState(1)
  const [formData, setFormData] = useState({
    orderNumber: "",
    objectName: "",
    objectAddress: "",
    deliveryDate: null as Date | null,
    deliveryTime: "",
    materials: "",
    photos: [] as string[]
  })
  const [showConfirmation, setShowConfirmation] = useState(false)
  const [telegramDebug, setTelegramDebug] = useState<string>('')
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è file_id –æ—Ç Telegram
  const [telegramFiles, setTelegramFiles] = useState<Array<{
    index: number;
    fileId: string;
    fileName: string;
  }>>([])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp (–∫–∞–∫ –≤ sellerkit)
  useEffect(() => {
    const initTelegramWebApp = async () => {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Telegram WebApp...');
      console.log('window.Telegram:', window.Telegram);
      console.log('window.Telegram?.WebApp:', window.Telegram?.WebApp);
      
      if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
        console.log('üì± initData:', window.Telegram.WebApp.initData);
        console.log('üì± initDataUnsafe:', window.Telegram.WebApp.initDataUnsafe);
        console.log('üì± WebApp version:', window.Telegram.WebApp.version);
        console.log('üì± WebApp platform:', window.Telegram.WebApp.platform);
        
        const telegramUser = window.Telegram.WebApp.initDataUnsafe?.user;
        const telegramId = telegramUser?.id;
        
        console.log('üì± Telegram User:', telegramUser);
        console.log('üì± Telegram ID:', telegramId);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        const debugInfo = `Telegram ID: ${telegramId || '–Ω–µ –Ω–∞–π–¥–µ–Ω'} | initData: ${window.Telegram.WebApp.initData ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`;
        setTelegramDebug(debugInfo);
        console.log('üì± Telegram Debug:', debugInfo);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebApp
        try {
          window.Telegram.WebApp.ready();
          window.Telegram.WebApp.expand();
          console.log('‚úÖ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebApp:', error);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º Telegram ID –≤ localStorage
        if (telegramId) {
          localStorage.setItem('telegram_id', telegramId.toString());
          console.log('üíæ Telegram ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage:', telegramId);
          
          // ‚òÖ NEW: –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ n8n webhook (–∫–∞–∫ –≤ sellerkit)
          try {
            const dataToSend = {
              page: "request-form",
              mode: "initialized",
              telegram_id: telegramId,
              initData: window.Telegram.WebApp.initData,
              telegram_user: telegramUser ? {
                id: telegramUser.id,
                first_name: telegramUser.first_name,
                last_name: telegramUser.last_name,
                username: telegramUser.username,
                language_code: telegramUser.language_code,
                is_premium: telegramUser.is_premium,
                photo_url: telegramUser.photo_url
              } : null,
              timestamp: new Date().toISOString(),
              action: "webapp_initialized"
            };
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ n8n webhook
            const response = await fetch("https://n8nunit.miaai.ru/webhook/f760ae2e-d95f-4f48-9134-c60aa408372b", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(dataToSend),
            });
            
            console.log('üì§ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ n8n webhook:', dataToSend);
            console.log('üì¶ –û—Ç–≤–µ—Ç –æ—Ç n8n:', await response.json());
            
            // –ü–æ –∂–µ–ª–∞–Ω–∏—é ‚Äî –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å–ª–∞—Ç—å –±–æ—Ç—É:
            window.Telegram.WebApp.sendData(JSON.stringify({
              telegram_id: telegramId,
              action: 'webapp_initialized'
            }));
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ n8n:', error);
          }
        }
        } else {
          // Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          const mockTelegramId = 123456789; // –¢–µ—Å—Ç–æ–≤—ã–π ID
          setTelegramDebug(`–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ | Mock ID: ${mockTelegramId}`);
          console.log('‚ö†Ô∏è Telegram WebApp –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º mock ID –≤ localStorage –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          localStorage.setItem('telegram_id', mockTelegramId.toString());
        }
    };
    
    initTelegramWebApp();
  }, [])
  const [calendarOpen, setCalendarOpen] = useState(false)

  const steps = [
    { number: 1, title: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞—Ä—è–¥-–∑–∞–∫–∞–∑–∞", placeholder: "–ù–ó 545/204", field: "orderNumber" },
    { number: 2, title: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞", placeholder: "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∏–π –ª–∏—Ü–µ–π", field: "objectName" },
    { number: 3, title: "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞", placeholder: "–Ω–∞–±. –í–∞—Ä–∫–∞—É—Å–∞, 15", field: "objectAddress" },
    { number: 4, title: "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å—Ç–∞–≤–∫–∏", placeholder: "10.12.2024 16:10", field: "deliveryDate" },
    { number: 5, title: "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", placeholder: "1. –°—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω–∞—è –ø—Ä–∏–≤—è–∑—å ‚Äì 2 —à—Ç;\n2. –°—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã–π —É—Å ‚Äì 2 —à—Ç;\n3. –ñ–∏–ª–µ—Ç–∫–∞ ‚Äì 2 —à—Ç;\n4. –ü–µ—Ä—á–∞—Ç–∫–∏ —Ö/–± ‚Äì 20 –ø–∞—Ä;\n5. –ü–µ—Ä—á–∞—Ç–∫–∏ –∑–∏–º–Ω–∏–µ ‚Äì 4 –ø–∞—Ä—ã;\n6. –ü–µ—Ä—á–∞—Ç–∫–∏ –ø—Ä–æ—Ä–µ–∑–∏–Ω–µ–Ω–Ω—ã–µ ‚Äì 10 –ø–∞—Ä;", field: "materials" },
    { number: 6, title: "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ", placeholder: "–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", field: "photos" }
  ]

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }))
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Telegram –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ –≤ sellerkit)
  const getTelegramData = () => {
    let telegramId = null;
    let initData = null;
    
    if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
      // –ü–æ–ª—É—á–∞–µ–º initData –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      initData = window.Telegram.WebApp.initData || null;
      
      // –°–ø–æ—Å–æ–± 1: —á–µ—Ä–µ–∑ initDataUnsafe
      if (window.Telegram.WebApp.initDataUnsafe?.user?.id) {
        telegramId = window.Telegram.WebApp.initDataUnsafe.user.id.toString();
      }
      
      // –°–ø–æ—Å–æ–± 2: —á–µ—Ä–µ–∑ initData (—Å—Ç—Ä–æ–∫–∞) - –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ initDataUnsafe
      if (!telegramId && initData) {
        try {
          const params = new URLSearchParams(initData);
          const userParam = params.get('user');
          if (userParam) {
            const user = JSON.parse(decodeURIComponent(userParam));
            if (user.id) {
              telegramId = user.id.toString();
            }
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ initData:', error);
        }
      }
      
      // –°–ø–æ—Å–æ–± 3: —á–µ—Ä–µ–∑ localStorage (–µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–∞–Ω–µ–µ)
      if (!telegramId) {
        const savedTelegramId = localStorage.getItem('telegram_id');
        if (savedTelegramId) {
          telegramId = savedTelegramId;
        }
      }
    }
    
    console.log('üîç getTelegramData:', { telegram_id: telegramId, initData: initData ? '–µ—Å—Ç—å' : '–Ω–µ—Ç' });
    return { telegram_id: telegramId, initData };
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ blob URL –≤ base64

  const handleSubmitRequest = async () => {
    try {
      const { telegram_id, initData } = getTelegramData();
      
      // –ü–æ–ª—É—á–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
      const moscowTime = new Date().toLocaleString("ru-RU", {
        timeZone: "Europe/Moscow",
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Telegram WebApp (–∫–∞–∫ –≤ sellerkit)
      const isTelegramWebApp = typeof window !== 'undefined' && 
        window.Telegram && 
        window.Telegram.WebApp && 
        typeof window.Telegram.WebApp.sendData === 'function';
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Telegram (–∫–∞–∫ –≤ sellerkit)
      const telegramUser = window.Telegram?.WebApp?.initDataUnsafe?.user;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Telegram WebApp
      const requestData = {
        request: {
          orderNumber: formData.orderNumber,
          objectName: formData.objectName,
          objectAddress: formData.objectAddress,
          deliveryDate: formData.deliveryDate ? format(formData.deliveryDate, "dd.MM.yyyy", { locale: ru }) : null,
          deliveryTime: formData.deliveryTime,
          materials: formData.materials,
          photos: formData.photos // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º blob URLs –Ω–∞–ø—Ä—è–º—É—é
        },
        timestamp: moscowTime,
        page: "request-form",
        mode: "submit",
        telegram_id: telegram_id,
        initData: initData,
        // ‚òÖ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Telegram
        telegram_user: telegramUser ? {
          id: telegramUser.id,
          first_name: telegramUser.first_name,
          last_name: telegramUser.last_name,
          username: telegramUser.username,
          language_code: telegramUser.language_code,
          is_premium: telegramUser.is_premium,
          photo_url: telegramUser.photo_url
        } : null
      };

      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram WebApp:');
      console.log('üîç window.Telegram:', !!window.Telegram);
      console.log('üîç window.Telegram.WebApp:', !!window.Telegram?.WebApp);
      console.log('üîç sendData function:', typeof window.Telegram?.WebApp?.sendData);
      console.log('üîç isTelegramWebApp:', isTelegramWebApp);
      console.log('üë§ Telegram User:', telegramUser);
      console.log('üì§ Request Data:', requestData);

      if (isTelegramWebApp) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram WebApp –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
        console.log('üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram WebApp –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤...');
        
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ file_id (—Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Å—Ä–∞–∑—É –ø—Ä–∏ –≤—ã–±–æ—Ä–µ)
      const updatedRequestData = {
        ...requestData,
        request: {
          ...requestData.request,
          photos: telegramFiles // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ file_id
        }
      };
      
      console.log('üì§ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ file_id:', telegramFiles);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ n8n webhook (–∫–∞–∫ –≤ sellerkit)
      try {
        const response = await fetch("https://n8nunit.miaai.ru/webhook/f760ae2e-d95f-4f48-9134-c60aa408372b", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(updatedRequestData),
        });
        
        console.log('üì§ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ n8n webhook:', updatedRequestData);
        console.log('üì¶ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç n8n:', response.status);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        const responseText = await response.text();
        console.log('üì¶ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç n8n:', responseText);
        
        if (responseText.trim()) {
          try {
            const responseData = JSON.parse(responseText);
            console.log('üì¶ JSON –æ—Ç–≤–µ—Ç –æ—Ç n8n:', responseData);
          } catch {
            console.warn('‚ö†Ô∏è –û—Ç–≤–µ—Ç –æ—Ç n8n –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON:', responseText);
          }
        } else {
          console.log('üì¶ –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç n8n (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
        }
        
        alert('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ Telegram!');
        window.location.href = '/';
        return;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ n8n:', error);
        const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: ${errorMessage}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`);
        return;
      }
      } else {
        // Fallback: –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        console.log('‚ö†Ô∏è Telegram WebApp –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ');
        alert('–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞.');
        return;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏:', error);
      console.error('‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏:', error instanceof Error ? error.constructor.name : 'Unknown');
      console.error('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', error instanceof Error ? error.message : 'Unknown error');
      console.error('‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error instanceof Error ? error.stack : 'No stack trace');
      
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  const nextStep = () => {
    if (currentStep < 6) {
      setCurrentStep(currentStep + 1)
    } else {
      setShowConfirmation(true)
    }
  }

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1)
    }
  }

  const handlePhotoUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files
    if (files) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 2MB –Ω–∞ —Ñ–∞–π–ª)
      const maxSize = 2 * 1024 * 1024; // 2MB
      const oversizedFiles = Array.from(files).filter(file => file.size > maxSize);
      
      if (oversizedFiles.length > 0) {
        alert(`–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ (–º–∞–∫—Å–∏–º—É–º 2MB). –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${oversizedFiles.length}`);
      }
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É
      const validFiles = Array.from(files).filter(file => file.size <= maxSize);
      
      if (validFiles.length === 0) {
        alert('–í—Å–µ —Ñ–∞–π–ª—ã —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 2MB');
        return;
      }
      
      // –°–æ–∑–¥–∞–µ–º blob URLs –¥–ª—è –ø—Ä–µ–≤—å—é
      const newPhotos = validFiles.map(file => URL.createObjectURL(file))
      setFormData(prev => ({ ...prev, photos: [...prev.photos, ...newPhotos] }))
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –≤ Telegram Bot API –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–µ file_id
      console.log('üì∏ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ –≤ Telegram Bot API...')
      
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ Telegram Bot API
        for (let i = 0; i < validFiles.length; i++) {
          const file = validFiles[i];
          
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ base64
          const base64 = await new Promise<string>((resolve) => {
            const reader = new FileReader()
            reader.onloadend = () => resolve(reader.result as string)
            reader.readAsDataURL(file)
          })
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–∞—à API —Ä–æ—É—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≥—Ä—É–∑–∏—Ç –≤ Telegram Bot API
          const uploadResponse = await fetch('/api/telegram-upload', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              file: base64,
              fileName: file.name,
              orderNumber: formData.orderNumber || '–ë–µ–∑ –Ω–æ–º–µ—Ä–∞',
              objectName: formData.objectName || '–ë–µ–∑ –æ–±—ä–µ–∫—Ç–∞'
            }),
          });
          
          if (uploadResponse.ok) {
            const result = await uploadResponse.json();
            if (result.success && result.file_id) {
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ù–ê–°–¢–û–Ø–©–ò–ô file_id –æ—Ç Telegram
              setTelegramFiles(prev => [...prev, {
                index: prev.length,
                fileId: result.file_id, // –ù–∞—Å—Ç–æ—è—â–∏–π file_id –æ—Ç Telegram
                fileName: file.name
              }]);
              console.log('‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Telegram Bot API:', result.file_id);
            } else {
              console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', result.error);
              alert(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: ${result.error}`);
            }
          } else {
            const errorText = await uploadResponse.text();
            console.error('‚ùå HTTP –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', errorText);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ –≤ Telegram');
          }
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ –≤ Telegram Bot API:', error)
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
    }
  }

  // Telegram WebApp file upload
  const handleTelegramPhotoUpload = () => {
    if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ showPopup –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
      if (typeof window.Telegram.WebApp.showPopup === 'function') {
        try {
          window.Telegram.WebApp.showPopup({
            title: '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ',
            message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∑–∞—è–≤–∫–∏',
            buttons: [
              {
                id: 'camera',
                type: 'default',
                text: '–ö–∞–º–µ—Ä–∞'
              },
              {
                id: 'gallery',
                type: 'default', 
                text: '–ì–∞–ª–µ—Ä–µ—è'
              },
              {
                id: 'cancel',
                type: 'cancel',
                text: '–û—Ç–º–µ–Ω–∞'
              }
            ]
          }, (buttonId) => {
            if (buttonId === 'camera' || buttonId === 'gallery') {
              // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
              const input = document.createElement('input');
              input.type = 'file';
              input.multiple = true;
              input.accept = 'image/*';
              input.onchange = (e) => {
                const files = (e.target as HTMLInputElement).files;
                if (files) {
                  const newPhotos = Array.from(files).map(file => URL.createObjectURL(file));
                  setFormData(prev => ({
                    ...prev,
                    photos: [...prev.photos, ...newPhotos]
                  }));
                }
              };
              input.click();
            }
          });
        } catch (error) {
          console.warn('‚ö†Ô∏è showPopup –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error);
          // Fallback: –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π input
          const input = document.getElementById('photo-upload') as HTMLInputElement;
          input?.click();
        }
      } else {
        console.log('üì± showPopup –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–µ—Ä—Å–∏–∏', window.Telegram.WebApp.version);
        // Fallback: –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π input
        const input = document.getElementById('photo-upload') as HTMLInputElement;
        input?.click();
      }
    } else {
      // Fallback –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
      const input = document.getElementById('photo-upload') as HTMLInputElement;
      input?.click();
    }
  };

  const removePhoto = (index: number) => {
    setFormData(prev => ({
      ...prev,
      photos: prev.photos.filter((_, i) => i !== index)
    }))
    
    // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π file_id
    setTelegramFiles(prev => prev.filter((_, i) => i !== index))
  }

  const handleKeyPress = (event: React.KeyboardEvent) => {
    if (event.key === 'Enter' && currentStep < 6) {
      nextStep()
    }
  }

  if (showConfirmation) {
    return (
      <div className="min-h-screen bg-background">
        {/* Header */}
        <div className="bg-background border-b border-border px-4 py-4">
          <div className="flex items-center">
            <Button variant="ghost" size="sm" className="mr-3" onClick={() => setShowConfirmation(false)}>
              <ArrowLeft className="h-4 w-4" />
            </Button>
            <div>
              <h1 className="text-xl font-bold text-foreground">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏</h1>
              <p className="text-sm text-muted-foreground">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π</p>
            </div>
          </div>
        </div>

        {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è Telegram */}
        <div className="bg-yellow-100 border border-yellow-300 rounded p-2 mx-4 mt-2">
          <div className="text-xs text-yellow-800">
            üîç –û—Ç–ª–∞–¥–∫–∞: {telegramDebug}
          </div>
          {telegramFiles.length > 0 && (
            <div className="text-xs text-green-800 mt-1">
              üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ –≤ Telegram Bot API: {telegramFiles.length} —à—Ç.
              {telegramFiles.map((file, index) => (
                <div key={index} className="ml-2">
                  ‚Ä¢ –§–æ—Ç–æ {file.index}: {file.fileId.substring(0, 20)}...
                </div>
              ))}
              <div className="text-xs text-blue-800 mt-1">
                üì§ –ù–∞—Å—Ç–æ—è—â–∏–µ File IDs –æ—Ç Telegram (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ n8n):
                {telegramFiles.map((file, index) => (
                  <div key={index} className="ml-2 font-mono">
                    ‚Ä¢ {file.fileId}
                  </div>
                ))}
              </div>
            </div>
          )}
          {telegramFiles.length === 0 && (
            <div className="text-xs text-gray-600 mt-1">
              üì∏ –§–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            </div>
          )}
        </div>

        <div className="px-4 py-4 space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">–î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <div>
                <Label className="text-sm font-medium text-muted-foreground">–ù–æ–º–µ—Ä –Ω–∞—Ä—è–¥-–∑–∞–∫–∞–∑–∞</Label>
                <p className="text-base">{formData.orderNumber || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</p>
              </div>
              <div>
                <Label className="text-sm font-medium text-muted-foreground">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞</Label>
                <p className="text-base">{formData.objectName || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</p>
              </div>
              <div>
                <Label className="text-sm font-medium text-muted-foreground">–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞</Label>
                <p className="text-base">{formData.objectAddress || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</p>
              </div>
              <div>
                <Label className="text-sm font-medium text-muted-foreground">–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏</Label>
                <p className="text-base">
                  {formData.deliveryDate 
                    ? `${format(formData.deliveryDate, "dd.MM.yyyy", { locale: ru })}${formData.deliveryTime ? ` ${formData.deliveryTime}` : ''}`
                    : "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                  }
                </p>
              </div>
              <div>
                <Label className="text-sm font-medium text-muted-foreground">–ú–∞—Ç–µ—Ä–∏–∞–ª—ã</Label>
                <p className="text-base">{formData.materials || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</p>
              </div>
              {formData.photos.length > 0 && (
                <div>
                  <Label className="text-sm font-medium text-muted-foreground">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</Label>
                  <div className="flex gap-2 mt-2">
                    {formData.photos.map((photo, index) => (
                      <div key={index} className="relative">
                        <Image
                          src={photo}
                          alt={`–§–æ—Ç–æ ${index + 1}`}
                          width={80}
                          height={80}
                          className="rounded-lg object-cover"
                        />
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </CardContent>
          </Card>

          <div className="flex gap-3 pb-6">
            <Button variant="outline" className="flex-1 h-12" onClick={() => setShowConfirmation(false)}>
              –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            </Button>
            <Button className="flex-1 h-12" onClick={handleSubmitRequest}>
              <Check className="h-4 w-4 mr-2" />
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
            </Button>
          </div>
        </div>
      </div>
    )
  }

  const currentStepData = steps[currentStep - 1]

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <div className="bg-background border-b border-border px-4 py-4">
        <div className="flex items-center">
          <Link href="/">
            <Button variant="ghost" size="sm" className="mr-3">
              <ArrowLeft className="h-4 w-4" />
            </Button>
          </Link>
          <div>
            <h1 className="text-xl font-bold text-foreground">–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</h1>
            <p className="text-sm text-muted-foreground">–®–∞–≥ {currentStep}/6</p>
          </div>
        </div>
      </div>

      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è Telegram */}
      <div className="bg-yellow-100 border border-yellow-300 rounded p-2 mx-4 mt-2">
        <div className="text-xs text-yellow-800">
          üîç –û—Ç–ª–∞–¥–∫–∞: {telegramDebug}
        </div>
        {telegramFiles.length > 0 && (
          <div className="text-xs text-green-800 mt-1">
            üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ –≤ Telegram Bot API: {telegramFiles.length} —à—Ç.
            {telegramFiles.map((file, index) => (
              <div key={index} className="ml-2">
                ‚Ä¢ –§–æ—Ç–æ {file.index}: {file.fileId.substring(0, 20)}...
              </div>
            ))}
            <div className="text-xs text-blue-800 mt-1">
              üì§ –ù–∞—Å—Ç–æ—è—â–∏–µ File IDs –æ—Ç Telegram (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ n8n):
              {telegramFiles.map((file, index) => (
                <div key={index} className="ml-2 font-mono">
                  ‚Ä¢ {file.fileId}
                </div>
              ))}
            </div>
          </div>
        )}
        {telegramFiles.length === 0 && (
          <div className="text-xs text-gray-600 mt-1">
            üì∏ –§–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
          </div>
        )}
      </div>

      {/* Progress Bar */}
      <div className="px-4 py-2">
        <div className="w-full bg-gray-200 rounded-full h-2">
          <div 
            className="bg-blue-600 h-2 rounded-full transition-all duration-300"
            style={{ width: `${(currentStep / 6) * 100}%` }}
          ></div>
        </div>
      </div>

      <div className="px-4 py-4">
        <Card>
          <CardHeader>
            <CardTitle className="text-lg">
              [{currentStep}/6] {currentStepData.title}
            </CardTitle>
            <p className="text-sm text-muted-foreground">
              {currentStep === 6 
                ? "–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ó–∞–≤–µ—Ä—à–∏—Ç—å\""
                : currentStep === 5
                ? "–£–∫–∞–∂–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–ø–∏—Å–∫–æ–º"
                : `–ù–∞–ø—Ä–∏–º–µ—Ä, "${currentStepData.placeholder}"`
              }
            </p>
          </CardHeader>
          <CardContent>
            {currentStep === 4 ? (
              <div className="space-y-4 min-h-[200px] flex flex-col">
            <div className="flex-1 flex flex-col justify-center">
                  <Label className="text-sm font-medium mb-2 block">–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É</Label>
                  <Popover open={calendarOpen} onOpenChange={setCalendarOpen}>
                    <PopoverTrigger asChild>
                      <Button
                        variant="outline"
                        className="w-full justify-start text-left font-normal flex-1"
                      >
                        <Calendar className="mr-2 h-4 w-4" />
                        {formData.deliveryDate ? (
                          format(formData.deliveryDate, "dd.MM.yyyy", { locale: ru })
                        ) : (
                          <span>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É</span>
                        )}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0">
                      <CalendarComponent
                        mode="single"
                        selected={formData.deliveryDate || undefined}
                        onSelect={(date) => {
                          setFormData(prev => ({ ...prev, deliveryDate: date || null }))
                          setCalendarOpen(false)
                        }}
                        initialFocus
                        locale={ru}
                      />
                    </PopoverContent>
                  </Popover>
            </div>
            <div className="flex-1 flex flex-col justify-center">
                  <Label className="text-sm font-medium mb-2 block">–í—Ä–µ–º—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</Label>
                  <div className="relative">
                    <Clock className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              <Input 
                      type="time"
                      placeholder="16:10"
                      value={formData.deliveryTime}
                      onChange={(e) => setFormData(prev => ({ ...prev, deliveryTime: e.target.value }))}
                      onKeyPress={handleKeyPress}
                      className="pl-10 h-12"
              />
            </div>
            </div>
            </div>
            ) : currentStep === 5 ? (
              <div className="min-h-[200px] flex flex-col">
              <Textarea 
                  placeholder={currentStepData.placeholder}
                  value={formData.materials}
                  onChange={(e) => handleInputChange('materials', e.target.value)}
                  onKeyPress={handleKeyPress}
                  className="flex-1 min-h-32"
              />
            </div>
            ) : currentStep === 6 ? (
              <div className="space-y-4 min-h-[200px]">
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                  <Camera className="h-12 w-12 mx-auto text-gray-400 mb-4" />
                  <p className="text-gray-600 mb-4">–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</p>
                  <input
                    type="file"
                    multiple
                    accept="image/*"
                    onChange={handlePhotoUpload}
                    className="hidden"
                    id="photo-upload"
                  />
                  <Button onClick={handleTelegramPhotoUpload}>
                    –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ
                    </Button>
                </div>
                
                {formData.photos.length > 0 && (
                  <div className="grid grid-cols-3 gap-2">
                    {formData.photos.map((photo, index) => (
                      <div key={index} className="relative">
                        <Image
                          src={photo}
                          alt={`–§–æ—Ç–æ ${index + 1}`}
                          width={100}
                          height={100}
                          className="rounded-lg object-cover"
                        />
                        <Button
                          size="sm"
                          variant="destructive"
                          className="absolute -top-2 -right-2 h-6 w-6 rounded-full p-0"
                          onClick={() => removePhoto(index)}
                        >
                          <X className="h-3 w-3" />
                        </Button>
                    </div>
                    ))}
                  </div>
                )}
              </div>
            ) : (
              <div className="min-h-[200px] flex flex-col">
                <Input
                  placeholder={currentStepData.placeholder}
                  value={formData[currentStepData.field as keyof typeof formData] as string}
                  onChange={(e) => handleInputChange(currentStepData.field, e.target.value)}
                  onKeyPress={handleKeyPress}
                  className="flex-1"
                />
              </div>
            )}
          </CardContent>
        </Card>

        {/* Navigation */}
        <div className="flex gap-3 mt-6 pb-6">
          {currentStep > 1 && (
            <Button variant="outline" className="flex-1 h-12" onClick={prevStep}>
              –ù–∞–∑–∞–¥
          </Button>
          )}
          <Button className="flex-1 h-12" onClick={nextStep}>
            {currentStep === 6 ? "–ó–∞–≤–µ—Ä—à–∏—Ç—å" : "–î–∞–ª–µ–µ"}
          </Button>
        </div>
      </div>
    </div>
  )
}
