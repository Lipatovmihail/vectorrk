"use client";

import * as React from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { Check, X, Package, Clock, CheckCircle } from "lucide-react";
import { IconCircleCheckFilled } from "@tabler/icons-react";
import { Button } from "@/components/ui/button";
import { toast } from "sonner";
import { Suspense } from "react";

// Mock data –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const mockRequests = [
  {
    id_fact: 29,
    object_name: "–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –∏ –º–æ–Ω—Ç–∞–∂ –≤–æ—Ä–æ—Ç",
    order_number: "–ù–ó 562/2024",
    object_address: "–ó–∞–π—Ü–µ–≤–∞",
    delivery_datetime: "2024-10-31 12:44:00",
    status: "–°–æ–∑–¥–∞–Ω–∞",
    materials: "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã\n1. –©–∏—Ç (2050400012) - 1 —à—Ç, 2. –®–∏–Ω–∞ \"N\" (2054303805) - 2 —à—Ç, –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å 3-—Ö –ø–æ–ª—é—Å–Ω–æ–π 20 –ê, –ö–∞–±–µ–ª—å 5*2,5 –º–º (50 –º–µ—Ç—Ä–æ–≤), –ì–æ—Ñ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–∞–ª–ª–æ—Ä—É–∫–∞–≤ —Å–æ —Å–∫–ª–∞–¥–∞ (–ø–æ –º–µ—Ç—Ä–∞–∂—É –∫–∞–±–µ–ª—è), –∫—Ä–µ–ø–µ–∂ –º–µ—Ç–∞–ª–ª–æ—Ä—É–∫–∞–≤–∞ (—à–∞–≥ 500 –º–º, –ø–æ –º–µ—Ç—Ä–∞–∂—É –∫–∞–±–µ–ª—è)."
  },
  {
    id_fact: 3,
    object_name: "–¢–ì–ö-1",
    order_number: "–ù–ó 58",
    object_address: "–ú–∞–∑—É—Ç–Ω—ã–π —Ä–µ–∑–µ—Ä–≤—É–∞—Ä",
    delivery_datetime: "2024-10-25 12:16:00",
    status: "–°–æ–∑–¥–∞–Ω–∞",
    materials: "–õ–∏—Å—Ç –ì–ö —Ç–æ–ª—â–∏–Ω–∞ 4 –º–º, —Ä–∞–∑–º–µ—Ä 6*1,5 –º–µ—Ç—Ä–∞, 15 —Ç–æ–Ω–Ω, –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–∞—Ä—Ç–∏—è–º–∏, –∫—Ä–∞—Ç–Ω–æ –ª–∏—Å—Ç–∞–º, –∞ –Ω–µ —Ç–æ–Ω–Ω–∞–º."
  }
];

function EditPageContent() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const requestId = searchParams.get('id');

  const [selectedRequest, setSelectedRequest] = React.useState<{
    id_fact: number;
    object_name: string;
    order_number: string;
    object_address: string;
    delivery_datetime: string;
    status: string;
    materials: string;
  } | null>(null);
  const [editingField, setEditingField] = React.useState<string | null>(null);
  const [editedValue, setEditedValue] = React.useState<string>('');
  const [isLoading, setIsLoading] = React.useState(true);
  const [editRequests, setEditRequests] = React.useState<Array<{
    id_fact: number;
    object_name: string;
    order_number: string;
    object_address: string;
    delivery_datetime: string;
    status: string;
    materials: string;
  }>>([]);

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –Ω–∞ —Ñ—É–ª—Å–∫—Ä–∏–Ω
  React.useEffect(() => {
    if (window.Telegram?.WebApp) {
      window.Telegram.WebApp.expand();
      window.Telegram.WebApp.MainButton.hide();
      window.Telegram.WebApp.enableClosingConfirmation();
    }
  }, []);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  React.useEffect(() => {
    loadEditRequestsData();
  }, []);

  React.useEffect(() => {
    if (requestId) {
      const request = editRequests.find(r => r.id_fact === parseInt(requestId));
      setSelectedRequest(request || null);
    }
  }, [requestId, editRequests]);

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const loadEditRequestsData = async () => {
    try {
      setIsLoading(true);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
      const telegramId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id;
      const initData = window.Telegram?.WebApp?.initData;
      const telegramUser = window.Telegram?.WebApp?.initDataUnsafe?.user;
      
      if (!telegramId) {
        console.log('‚ö†Ô∏è Telegram WebApp –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ');
        // Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        setEditRequests(mockRequests);
        setIsLoading(false);
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ n8n –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const requestData = {
        page: "edit",
        mode: "editlist",
        telegram_id: telegramId,
        initData: initData,
        telegram_user: telegramUser ? {
          id: telegramUser.id,
          first_name: telegramUser.first_name,
          last_name: telegramUser.last_name,
          username: telegramUser.username,
          language_code: telegramUser.language_code,
          is_premium: telegramUser.is_premium,
          photo_url: telegramUser.photo_url
        } : null,
        timestamp: new Date().toISOString()
      };

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', requestData);

      const response = await fetch("https://n8nunit.miaai.ru/webhook/f760ae2e-d95f-4f48-9134-c60aa408372b", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(requestData),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      console.log('üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', data);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç n8n
      if (data.success && data.data && Array.isArray(data.data)) {
        setEditRequests(data.data);
      } else {
        console.log('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ');
        setEditRequests(mockRequests);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ
      setEditRequests(mockRequests);
    } finally {
      setIsLoading(false);
    }
  };

  const startEditing = (field: string, currentValue: string) => {
    setEditingField(field);
    setEditedValue(currentValue);
  };

  const saveChanges = (field: string, newValue: string) => {
    if (!selectedRequest) return;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    let currentValue = '';
    switch (field) {
      case 'order_number':
        currentValue = selectedRequest.order_number;
        break;
      case 'object_name':
        currentValue = selectedRequest.object_name;
        break;
      case 'object_address':
        currentValue = selectedRequest.object_address;
        break;
      case 'materials':
        currentValue = selectedRequest.materials || '';
        break;
      case 'delivery_date':
        currentValue = selectedRequest.delivery_datetime.split(' ')[0];
        break;
      case 'delivery_time':
        currentValue = selectedRequest.delivery_datetime.includes(' 00:00:00') ? '' : selectedRequest.delivery_datetime.split(' ')[1]?.slice(0, 5) || '';
        break;
      default:
        break;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ
    if (currentValue === newValue) {
      setEditingField(null);
      setEditedValue('');
      return; // –ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    const updatedRequest = { ...selectedRequest };
    switch (field) {
      case 'order_number':
        updatedRequest.order_number = newValue;
        break;
      case 'object_name':
        updatedRequest.object_name = newValue;
        break;
      case 'object_address':
        updatedRequest.object_address = newValue;
        break;
      case 'materials':
        updatedRequest.materials = newValue;
        break;
      case 'delivery_date':
        // Also update delivery_datetime
        updatedRequest.delivery_datetime = `${newValue} ${updatedRequest.delivery_datetime.split(' ')[1]}`;
        break;
      case 'delivery_time':
        // Also update delivery_datetime
        updatedRequest.delivery_datetime = `${updatedRequest.delivery_datetime.split(' ')[0]} ${newValue}:00`;
        break;
      default:
        break;
    }
    setSelectedRequest(updatedRequest);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º —è–∑—ã–∫–µ
    const fieldNames: { [key: string]: string } = {
      'order_number': '–ù–æ–º–µ—Ä –Ω–∞—Ä—è–¥-–∑–∞–∫–∞–∑–∞',
      'object_name': '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞',
      'object_address': '–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞',
      'materials': '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã',
      'delivery_date': '–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏',
      'delivery_time': '–í—Ä–µ–º—è –ø–æ—Å—Ç–∞–≤–∫–∏'
    };

    toast.success(`${fieldNames[field]} –∏–∑–º–µ–Ω–µ–Ω`);
    setEditingField(null);
    setEditedValue('');
  };

  const cancelEditing = () => {
    setEditingField(null);
    setEditedValue('');
  };

  // –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∑–∞—è–≤–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
  if (!selectedRequest) {
    return (
      <div className="min-h-screen bg-background pb-24">
        {/* Header */}
        <div className="sticky top-0 z-50 bg-background/80 backdrop-blur-sm border-b border-border px-4 py-1">
        <div className="text-center pt-safe pt-12">
          <h1 className="text-lg font-semibold">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h1>
        </div>
        </div>

        {/* –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ */}
        <div className="px-4 py-2">
          <div className="rounded-2xl p-4" style={{backgroundColor: '#f8f9fa'}}>
            <h2 className="text-lg font-semibold text-foreground mb-1">–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h2>
            <p className="text-xs text-muted-foreground mb-3 leading-tight">
              –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞—è–≤–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            </p>

            {/* –≠–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ */}
            {isLoading ? (
              <div className="flex flex-col items-center justify-center py-8">
                <div className="animate-spin w-8 h-8 border-2 border-gray-300 border-t-gray-600 rounded-full mb-3"></div>
                <p className="text-sm text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫...</p>
              </div>
            ) : (
              <div className="space-y-1">
                {editRequests.map((request) => (
                <div
                  key={request.id_fact}
                  className="p-2 bg-white border border-gray-200 rounded-lg cursor-pointer hover:bg-gray-50 transition-colors"
                  onClick={() => setSelectedRequest(request)}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <div className="w-5 h-5 bg-muted rounded-md flex items-center justify-center">
                        <Package className="h-2.5 w-2.5 text-muted-foreground" />
                      </div>
                      <div>
                        <div className="font-medium text-foreground text-sm">{request.object_name}</div>
                        <div className="text-xs text-muted-foreground">
                          {new Date(request.delivery_datetime).toLocaleDateString('ru-RU')} ‚Ä¢ {request.object_address}
                        </div>
                      </div>
                    </div>
                    <div className="text-right">
                      <span className="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium text-muted-foreground border border-gray-200">
                        {request.status === "–í —Ä–∞–±–æ—Ç–µ" ? (
                          <Clock className="h-3 w-3 mr-1 text-orange-500" />
                        ) : request.status === "–ì–æ—Ç–æ–≤–∞" ? (
                          <IconCircleCheckFilled className="h-3 w-3 mr-1 fill-green-500 dark:fill-green-400" />
                        ) : (
                          <CheckCircle className="h-3 w-3 mr-1 text-blue-500" />
                        )}
                        {request.status}
                      </span>
                    </div>
                  </div>
                </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background pb-24">
      {/* Header */}
      <div className="sticky top-0 z-50 bg-background/80 backdrop-blur-sm border-b border-border px-4 py-1">
        <div className="text-center pt-safe pt-12">
          <h1 className="text-lg font-semibold">{selectedRequest.object_name}</h1>
        </div>
      </div>

      {/* Main Content */}
      <div className="px-4 py-2">

        <div className="space-y-6">
          {/* 1. –ù–æ–º–µ—Ä –Ω–∞—Ä—è–¥-–∑–∞–∫–∞–∑–∞ */}
          <div>
            <h3 className="text-sm font-medium mb-3">1. –ù–æ–º–µ—Ä –Ω–∞—Ä—è–¥-–∑–∞–∫–∞–∑–∞</h3>
            
            {editingField === 'order_number' ? (
              <div className="flex items-center gap-2">
                <input
                  type="text"
                  defaultValue={selectedRequest.order_number}
                  className="flex-1 px-3 py-2 border rounded-md bg-gray-50 h-12"
                  autoFocus
                  onChange={(e) => setEditedValue(e.target.value)}
                />
                <Button size="sm" onClick={() => saveChanges('order_number', editedValue)}>
                  <Check className="h-4 w-4" />
                </Button>
                <Button size="sm" variant="ghost" onClick={cancelEditing}>
                  <X className="h-4 w-4" />
                </Button>
              </div>
            ) : (
              <div 
                className="px-3 py-2 bg-gray-50 border rounded-md cursor-pointer hover:bg-gray-100 h-12 flex items-center"
                onClick={() => startEditing('order_number', selectedRequest.order_number)}
              >
                <p className="font-medium">{selectedRequest.order_number}</p>
              </div>
            )}
          </div>

          {/* 2. –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ */}
          <div>
            <h3 className="text-sm font-medium mb-3">2. –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞</h3>
            
            {editingField === 'object_name' ? (
              <div className="flex items-center gap-2">
                <input
                  type="text"
                  defaultValue={selectedRequest.object_name}
                  className="flex-1 px-3 py-2 border rounded-md bg-gray-50 h-12"
                  autoFocus
                  onChange={(e) => setEditedValue(e.target.value)}
                />
                <Button size="sm" onClick={() => saveChanges('object_name', editedValue)}>
                  <Check className="h-4 w-4" />
                </Button>
                <Button size="sm" variant="ghost" onClick={cancelEditing}>
                  <X className="h-4 w-4" />
                </Button>
              </div>
            ) : (
              <div 
                className="px-3 py-2 bg-gray-50 border rounded-md cursor-pointer hover:bg-gray-100 h-12 flex items-center"
                onClick={() => startEditing('object_name', selectedRequest.object_name)}
              >
                <p className="font-medium">{selectedRequest.object_name}</p>
              </div>
            )}
          </div>

          {/* 3. –ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞ */}
          <div>
            <h3 className="text-sm font-medium mb-3">3. –ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞</h3>
            
            {editingField === 'object_address' ? (
              <div className="flex items-center gap-2">
                <input
                  type="text"
                  defaultValue={selectedRequest.object_address}
                  className="flex-1 px-3 py-2 border rounded-md bg-gray-50 h-12"
                  autoFocus
                  onChange={(e) => setEditedValue(e.target.value)}
                />
                <Button size="sm" onClick={() => saveChanges('object_address', editedValue)}>
                  <Check className="h-4 w-4" />
                </Button>
                <Button size="sm" variant="ghost" onClick={cancelEditing}>
                  <X className="h-4 w-4" />
                </Button>
              </div>
            ) : (
              <div 
                className="px-3 py-2 bg-gray-50 border rounded-md cursor-pointer hover:bg-gray-100 h-12 flex items-center"
                onClick={() => startEditing('object_address', selectedRequest.object_address)}
              >
                <p className="font-medium">{selectedRequest.object_address}</p>
              </div>
            )}
          </div>

          {/* 4. –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ */}
          <div>
            <h3 className="text-sm font-medium mb-3">4. –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏</h3>
            
            <div className="flex gap-4">
              {/* –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ */}
              <div className="flex-1">
                <label className="text-sm text-muted-foreground mb-2 block">–î–∞—Ç–∞</label>
                {editingField === 'delivery_date' ? (
                  <div className="flex items-center gap-2">
                    <input
                      type="date"
                      defaultValue={selectedRequest.delivery_datetime.split(' ')[0]}
                      className="flex-1 px-3 py-2 border rounded-md bg-gray-50 h-12"
                      autoFocus
                      onChange={(e) => setEditedValue(e.target.value)}
                    />
                    <Button size="sm" onClick={() => saveChanges('delivery_date', editedValue)}>
                      <Check className="h-4 w-4" />
                    </Button>
                    <Button size="sm" variant="ghost" onClick={cancelEditing}>
                      <X className="h-4 w-4" />
                    </Button>
                  </div>
                ) : (
                  <div 
                    className="px-3 py-2 bg-gray-50 border rounded-md cursor-pointer hover:bg-gray-100 h-12 flex items-center"
                    onClick={() => startEditing('delivery_date', selectedRequest.delivery_datetime.split(' ')[0])}
                  >
                    <p className="font-medium">
                      {new Date(selectedRequest.delivery_datetime).toLocaleDateString('ru-RU')}
                    </p>
                  </div>
                )}
              </div>

              {/* –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ */}
              <div className="flex-1">
                <label className="text-sm text-muted-foreground mb-2 block">–í—Ä–µ–º—è</label>
                {editingField === 'delivery_time' ? (
                  <div className="flex items-center gap-2">
                    <input
                      type="time"
                      defaultValue={selectedRequest.delivery_datetime.includes(' 00:00:00') ? '' : selectedRequest.delivery_datetime.split(' ')[1]?.slice(0, 5)}
                      className="flex-1 px-3 py-2 border rounded-md bg-gray-50 h-12"
                      autoFocus
                      onChange={(e) => setEditedValue(e.target.value)}
                    />
                    <Button size="sm" onClick={() => saveChanges('delivery_time', editedValue)}>
                      <Check className="h-4 w-4" />
                    </Button>
                    <Button size="sm" variant="ghost" onClick={cancelEditing}>
                      <X className="h-4 w-4" />
                    </Button>
                  </div>
                ) : (
                  <div 
                    className="px-3 py-2 bg-gray-50 border rounded-md cursor-pointer hover:bg-gray-100 h-12 flex items-center"
                    onClick={() => startEditing('delivery_time', selectedRequest.delivery_datetime.includes(' 00:00:00') ? '' : selectedRequest.delivery_datetime.split(' ')[1]?.slice(0, 5))}
                  >
                    <p className="font-medium">
                      {selectedRequest.delivery_datetime.includes(' 00:00:00') ? '–ù–µ —É–∫–∞–∑–∞–Ω–æ' : 
                       selectedRequest.delivery_datetime.split(' ')[1]?.slice(0, 5)}
                    </p>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* 5. –ú–∞—Ç–µ—Ä–∏–∞–ª—ã */}
          <div>
            <h3 className="text-sm font-medium mb-3">5. –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</h3>
            
            {editingField === 'materials' ? (
              <div className="flex items-start gap-2">
                <textarea
                  defaultValue={selectedRequest.materials || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
                  className="flex-1 px-3 py-2 border rounded-md bg-gray-50 min-h-[120px]"
                  autoFocus
                  onChange={(e) => setEditedValue(e.target.value)}
                />
                <div className="flex flex-col gap-1">
                  <Button size="sm" onClick={() => saveChanges('materials', editedValue)}>
                    <Check className="h-4 w-4" />
                  </Button>
                  <Button size="sm" variant="ghost" onClick={cancelEditing}>
                    <X className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            ) : (
              <div 
                className="px-3 py-2 bg-gray-50 border rounded-md cursor-pointer hover:bg-gray-100 min-h-[120px] flex items-start"
                onClick={() => startEditing('materials', selectedRequest.materials || "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}
              >
                <p className="font-medium whitespace-pre-line">
                  {selectedRequest.materials || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
                </p>
              </div>
            )}
          </div>

        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="flex gap-3 mt-6 pb-6">
          <Button
            variant="outline"
            className="flex-1 h-12 bg-white border border-gray-200 hover:bg-gray-50"
            onClick={() => setSelectedRequest(null)}
          >
            –û—Ç–º–µ–Ω–∏—Ç—å
          </Button>
          <Button
            className="flex-1 h-12 bg-black hover:bg-gray-800 text-white"
            onClick={() => {
              toast.success('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
              setTimeout(() => router.push('/'), 500);
            }}
          >
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å
          </Button>
        </div>
      </div>
    </div>
  );
}

export default function EditPage() {
  return (
    <Suspense fallback={
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="animate-spin w-8 h-8 border-2 border-gray-300 border-t-gray-600 rounded-full"></div>
      </div>
    }>
      <EditPageContent />
    </Suspense>
  );
}