import { NextResponse } from 'next/server';

export async function POST(request: Request) {
  try {
    const { file, fileName, orderNumber, objectName } = await request.json();
    
    console.log('üì∏ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ:', { fileName, orderNumber, objectName });
    
    if (!file) {
      console.error('‚ùå –§–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
      return NextResponse.json({ success: false, error: '–§–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' }, { status: 400 });
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º base64 –¥–∞–Ω–Ω—ã–µ (—É–±–∏—Ä–∞–µ–º data:image/jpeg;base64,)
    const base64Data = file.split(',')[1];
    const buffer = Buffer.from(base64Data, 'base64');
    
    console.log('üì∏ –§–∞–π–ª –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ buffer, —Ä–∞–∑–º–µ—Ä:', buffer.length);

    // Telegram Bot API endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
    const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
    const telegramChatId = process.env.TELEGRAM_CHAT_ID || process.env.TELEGRAM_ADMIN_CHAT_ID;
    
    console.log('üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', { 
      hasToken: !!telegramBotToken, 
      hasChatId: !!telegramChatId,
      chatId: telegramChatId 
    });
    
    if (!telegramBotToken || !telegramChatId) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram Bot API');
      return NextResponse.json({ 
        success: false, 
        error: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram Bot API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' 
      }, { status: 500 });
    }

    // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    const formData = new FormData();
    formData.append('photo', new Blob([buffer]), fileName);
    formData.append('chat_id', telegramChatId);
    formData.append('caption', `üìã –ó–∞—è–≤–∫–∞: ${orderNumber}\nüè¢ –û–±—ä–µ–∫—Ç: ${objectName}\nüìÅ –§–∞–π–ª: ${fileName}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram Bot API
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram Bot API...');
    const telegramResponse = await fetch(`https://api.telegram.org/bot${telegramBotToken}/sendPhoto`, {
      method: 'POST',
      body: formData,
    });

    console.log('üì¶ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram:', telegramResponse.status);
    const telegramResult = await telegramResponse.json();
    console.log('üì¶ –û—Ç–≤–µ—Ç –æ—Ç Telegram:', telegramResult);

    if (!telegramResult.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Telegram Bot API:', telegramResult);
      return NextResponse.json({ 
        success: false, 
        error: `–û—à–∏–±–∫–∞ Telegram API: ${telegramResult.description}` 
      }, { status: 500 });
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º file_id –∏–∑ –æ—Ç–≤–µ—Ç–∞ Telegram
    const fileId = telegramResult.result.photo[telegramResult.result.photo.length - 1].file_id;
    
    console.log('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Telegram:', {
      fileName,
      fileId,
      orderNumber,
      objectName
    });

    return NextResponse.json({ 
      success: true, 
      file_id: fileId,
      fileName,
      message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Telegram'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –≤ Telegram:', error);
    return NextResponse.json({ 
      success: false, 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    }, { status: 500 });
  }
}
